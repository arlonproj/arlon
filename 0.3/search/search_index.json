{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 \u00b6 What Is Arlon? \u00b6 Arlon is a declarative, gitops based fleet management tool for Kubernetes clusters. It allows administrators to: Deploy and upgrade a large number of workload clusters Secure clusters by installing and configuring policies Install a set of applications / add-ons on the clusters all in a structured, predictable manner. Arlon makes Kubernetes cluster fleet management secure, version controlled, auditable and easy to perform at scale. Arlon takes advantage of multiple declarative cluster management API providers for the actual cluster orchestration. The first two supported API providers are Cluster API and Crossplane. Arlon uses ArgoCD as the underlying Kubernetes manifest deployment and enforcement engine. A workload cluster is composed of the following constructs: Cluster spec : a description of the infrastructure and external settings of a cluster, e.g. Kubernetes version, cloud provider, cluster type, node instance type. Profile : a grouping of configuration bundles which will be installed into the cluster Configuration bundle : a unit of configuration which contains (or references) one or more Kubernetes manifests. A bundle can encapsulate anything that can be deployed onto a cluster: an RBAC ruleset, an add-on, an application, etc... Arlon Benefits \u00b6 Improves time to market by enabling better velocity for developers through infrastructure management that is more fluid and agile. Define, store, change and enforce your cluster infrastructure & application add-ons at scale. Reduces the risk of unexpected infrastructure downtime and outages, or unexpected security misconfiguration, with consistent management of infrastructure and security policies. Allows IT and Platform Ops admins to operate large scale of clusters, infrastructure & add-ons with significantly reduced team size & operational overhead, using GitOps.","title":"Overview"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#_1","text":"","title":""},{"location":"#what-is-arlon","text":"Arlon is a declarative, gitops based fleet management tool for Kubernetes clusters. It allows administrators to: Deploy and upgrade a large number of workload clusters Secure clusters by installing and configuring policies Install a set of applications / add-ons on the clusters all in a structured, predictable manner. Arlon makes Kubernetes cluster fleet management secure, version controlled, auditable and easy to perform at scale. Arlon takes advantage of multiple declarative cluster management API providers for the actual cluster orchestration. The first two supported API providers are Cluster API and Crossplane. Arlon uses ArgoCD as the underlying Kubernetes manifest deployment and enforcement engine. A workload cluster is composed of the following constructs: Cluster spec : a description of the infrastructure and external settings of a cluster, e.g. Kubernetes version, cloud provider, cluster type, node instance type. Profile : a grouping of configuration bundles which will be installed into the cluster Configuration bundle : a unit of configuration which contains (or references) one or more Kubernetes manifests. A bundle can encapsulate anything that can be deployed onto a cluster: an RBAC ruleset, an add-on, an application, etc...","title":"What Is Arlon?"},{"location":"#arlon-benefits","text":"Improves time to market by enabling better velocity for developers through infrastructure management that is more fluid and agile. Define, store, change and enforce your cluster infrastructure & application add-ons at scale. Reduces the risk of unexpected infrastructure downtime and outages, or unexpected security misconfiguration, with consistent management of infrastructure and security policies. Allows IT and Platform Ops admins to operate large scale of clusters, infrastructure & add-ons with significantly reduced team size & operational overhead, using GitOps.","title":"Arlon Benefits"},{"location":"contributing/","text":"How to contribute to Arlon \u00b6 Team Arlon welcomes and encourages everyone to participate in its development via pull requests on GitHub. We prefer to take in pull requests to our active development branch i.e. the main branch. To report a bug or request a feature, we rely on GitHub issues. There are a number of points to keep in mind when submitting a feature request, reporting a bug or contributing in the development of Arlon. Before making a feature request, or reporting a bug please browse through the existing open issues to be sure that it hasn't been already tracked. If a feature request is subsumed by some other open issue, please add your valuable feedback as a comment to the issue. If a bug discovered by you is already being tracked, please provide additional information as you see fit(steps to reproduce, particulars of the environment, version information etc.) as a comment. Before submitting code for a new feature(or a complex, untracked bugfix) please create a new issue. This issue needs to undergo a review process which may involve a discussion on the same GitHub issue to discuss possible approaches and motivation for the said proposal. Please reach out to us on Slack for discussions, help, questions and the roadmap. Code changes \u00b6 Open a pull request (PR) on GitHub following the typical GitHub workflow here . Most of the new code changes are merged to the main branch except backports, bookkeeping changes, library upgrades and some bugs that manifest only a particular version. Before contributing new code, contributors are encouraged to either write unit tests, e2e tests or perform some form of manual validation as a sanity-check. Please adhere to standard good practices for Golang and do ensure that the code is properly formatted and vet succeeds, for which we have fmt and vet targets respectively. Since Arlon is a growing project, various areas require improvements- improving code coverage with unit tests, e2e tests (since v0.10), documentation, CI/CD pipelines using GitHub Actions are a few to name, we highly encourage to contribute to those areas to start with. Issues / Bug reports \u00b6 We track issues on GitHub . You are encouraged to browse through these, add relevant feedback, create new issues or participate in the development. If you are interested in a particular issue or feature request, please leave a comment to reach out to the team. In particular, the issues labeled as help wanted are a great starting point for adding code changes to the project. Documentation \u00b6 The documentation for Arlon is hosted on Read the Docs and comprises of contents from the \"docs\" directory of Arlon source. For making changes to the documentation, please follow the below steps: Fork the Arlon repository on GitHub and make the desired changes. Prerequisites Ensure that python3 , pip3 is installed. Optionally, create a venv by running python3 -m venv ./venv to create a virtual environment if you don't have one. From the root of the Arlon repository, run pip3 install -r docs/requirements.txt to install mkdocs and other pre-requisites. To test your local changes, run mike serve from the repository root. This starts a local server to host the documentation website where you can preview the changes. To publish the changes, just push the changes to your fork repository and open a PR (pull request). Once your PR is accepted by one of the maintainers/ owners of Arlon project, the Arlon website will be updated.","title":"How to contribute to Arlon"},{"location":"contributing/#how-to-contribute-to-arlon","text":"Team Arlon welcomes and encourages everyone to participate in its development via pull requests on GitHub. We prefer to take in pull requests to our active development branch i.e. the main branch. To report a bug or request a feature, we rely on GitHub issues. There are a number of points to keep in mind when submitting a feature request, reporting a bug or contributing in the development of Arlon. Before making a feature request, or reporting a bug please browse through the existing open issues to be sure that it hasn't been already tracked. If a feature request is subsumed by some other open issue, please add your valuable feedback as a comment to the issue. If a bug discovered by you is already being tracked, please provide additional information as you see fit(steps to reproduce, particulars of the environment, version information etc.) as a comment. Before submitting code for a new feature(or a complex, untracked bugfix) please create a new issue. This issue needs to undergo a review process which may involve a discussion on the same GitHub issue to discuss possible approaches and motivation for the said proposal. Please reach out to us on Slack for discussions, help, questions and the roadmap.","title":"How to contribute to Arlon"},{"location":"contributing/#code-changes","text":"Open a pull request (PR) on GitHub following the typical GitHub workflow here . Most of the new code changes are merged to the main branch except backports, bookkeeping changes, library upgrades and some bugs that manifest only a particular version. Before contributing new code, contributors are encouraged to either write unit tests, e2e tests or perform some form of manual validation as a sanity-check. Please adhere to standard good practices for Golang and do ensure that the code is properly formatted and vet succeeds, for which we have fmt and vet targets respectively. Since Arlon is a growing project, various areas require improvements- improving code coverage with unit tests, e2e tests (since v0.10), documentation, CI/CD pipelines using GitHub Actions are a few to name, we highly encourage to contribute to those areas to start with.","title":"Code changes"},{"location":"contributing/#issues-bug-reports","text":"We track issues on GitHub . You are encouraged to browse through these, add relevant feedback, create new issues or participate in the development. If you are interested in a particular issue or feature request, please leave a comment to reach out to the team. In particular, the issues labeled as help wanted are a great starting point for adding code changes to the project.","title":"Issues / Bug reports"},{"location":"contributing/#documentation","text":"The documentation for Arlon is hosted on Read the Docs and comprises of contents from the \"docs\" directory of Arlon source. For making changes to the documentation, please follow the below steps: Fork the Arlon repository on GitHub and make the desired changes. Prerequisites Ensure that python3 , pip3 is installed. Optionally, create a venv by running python3 -m venv ./venv to create a virtual environment if you don't have one. From the root of the Arlon repository, run pip3 install -r docs/requirements.txt to install mkdocs and other pre-requisites. To test your local changes, run mike serve from the repository root. This starts a local server to host the documentation website where you can preview the changes. To publish the changes, just push the changes to your fork repository and open a PR (pull request). Once your PR is accepted by one of the maintainers/ owners of Arlon project, the Arlon website will be updated.","title":"Documentation"},{"location":"design/","text":"Arlon Design and Concepts \u00b6 Management cluster \u00b6 This Kubernetes cluster hosts the following components: - ArgoCD - Arlo - Cluster management stacks e.g. Cluster API and/or Crossplane The Arlo state and controllers reside in the arlo namespace. Configuration bundle \u00b6 A configuration bundle (or just \"bundle\") is grouping of data files that produce a set of Kubernetes manifests via a tool . This closely follows ArgoCD's definition of tool types . Consequently, the list of supported bundle types mirrors ArgoCD's supported set of manifest-producing tools. Each bundle is defined using a Kubernetes ConfigMap resource in the arlo namespace. Additionally, a bundle can embed the data itself (\"static bundle\"), or contain a reference to the data (\"dynamic bundle\"). A reference can be a URL, github location, or Helm repo location. The current list of supported bundle types is: manifest_inline: a single manifest yaml file embedded in the resource manifest_ref: a reference to a single manifest yaml file dir_inline: an embedded tarball that expands to a directory of YAML files helm_inline: an embedded Helm chart package helm_ref: an external reference to a Helm chart Bundle purpose \u00b6 Bundles can specify an optional purpose to help classify and organize them. In the future, Arlo may order bundle installation by purpose order (for e.g. install bundles with purpose= networking before others) but that is not the case today. The currenty suggested purpose values are: - networking - add-on - data-service - application Cluster specification \u00b6 A cluster specification contains desired settings when creating a new cluster. They currently include: - Stack: the cluster provisioning stack, for e.g. cluster-api or crossplane - Provider: the specific cluster management provider under that stack, if applicable. Example: for cluster-api , the possible values are eks and kubeadm - Other settings that specify the \"shape\" of the cluster, such as the size of the control plane and the initial number of nodes of the data plane. - The pod networking technology (under discussion: this may be moved to a bundle because most if not all CNI providers can be installed as manifests) Profile \u00b6 A profile expresses a desired configuration for a Kubernetes cluster. It is composed of - An optional Cluster Specification. If specified, it allows the profile to be used to create new clusters. If absent, the profile can only be applied to existing clusters. - A list of bundles specifying the configuration to apply onto the cluster once it is operational - An optional list of value.yaml settings for any Helm Chart type bundle in the bundle list Cluster chart \u00b6 The cluster chart is a Helm chart that creates (and optionally applies) the manifests necessary to create a cluster and deploy desired configurations and applications to it. When a user uses Arlo to create and configure a cluster, he or she specifies a profile. The profile's cluster specification, bundle list and other settings are used to generate values for the chart, and the chart is deployed as a Helm release into the arlo namespace in the management cluster. Here is a summary of the kinds of resources generated and deployed by the chart: - A unique namespace with a name based on the cluster's name. All subsequent resources below are created inside of that namespace. - The stack-specific resources to create the cluster (for e.g. Cluster API resources) - A ClusterRegistration to automatically register the cluster with ArgoCD - A GitRepoDir to automatically create a git repo and/or directory to host a copy of the expanded bundles. Every bundle referenced by the profile is copied/unpacked into its own subdirectory. - One ArgoCD Application resource for each bundle.","title":"Design"},{"location":"design/#arlon-design-and-concepts","text":"","title":"Arlon Design and Concepts"},{"location":"design/#management-cluster","text":"This Kubernetes cluster hosts the following components: - ArgoCD - Arlo - Cluster management stacks e.g. Cluster API and/or Crossplane The Arlo state and controllers reside in the arlo namespace.","title":"Management cluster"},{"location":"design/#configuration-bundle","text":"A configuration bundle (or just \"bundle\") is grouping of data files that produce a set of Kubernetes manifests via a tool . This closely follows ArgoCD's definition of tool types . Consequently, the list of supported bundle types mirrors ArgoCD's supported set of manifest-producing tools. Each bundle is defined using a Kubernetes ConfigMap resource in the arlo namespace. Additionally, a bundle can embed the data itself (\"static bundle\"), or contain a reference to the data (\"dynamic bundle\"). A reference can be a URL, github location, or Helm repo location. The current list of supported bundle types is: manifest_inline: a single manifest yaml file embedded in the resource manifest_ref: a reference to a single manifest yaml file dir_inline: an embedded tarball that expands to a directory of YAML files helm_inline: an embedded Helm chart package helm_ref: an external reference to a Helm chart","title":"Configuration bundle"},{"location":"design/#bundle-purpose","text":"Bundles can specify an optional purpose to help classify and organize them. In the future, Arlo may order bundle installation by purpose order (for e.g. install bundles with purpose= networking before others) but that is not the case today. The currenty suggested purpose values are: - networking - add-on - data-service - application","title":"Bundle purpose"},{"location":"design/#cluster-specification","text":"A cluster specification contains desired settings when creating a new cluster. They currently include: - Stack: the cluster provisioning stack, for e.g. cluster-api or crossplane - Provider: the specific cluster management provider under that stack, if applicable. Example: for cluster-api , the possible values are eks and kubeadm - Other settings that specify the \"shape\" of the cluster, such as the size of the control plane and the initial number of nodes of the data plane. - The pod networking technology (under discussion: this may be moved to a bundle because most if not all CNI providers can be installed as manifests)","title":"Cluster specification"},{"location":"design/#profile","text":"A profile expresses a desired configuration for a Kubernetes cluster. It is composed of - An optional Cluster Specification. If specified, it allows the profile to be used to create new clusters. If absent, the profile can only be applied to existing clusters. - A list of bundles specifying the configuration to apply onto the cluster once it is operational - An optional list of value.yaml settings for any Helm Chart type bundle in the bundle list","title":"Profile"},{"location":"design/#cluster-chart","text":"The cluster chart is a Helm chart that creates (and optionally applies) the manifests necessary to create a cluster and deploy desired configurations and applications to it. When a user uses Arlo to create and configure a cluster, he or she specifies a profile. The profile's cluster specification, bundle list and other settings are used to generate values for the chart, and the chart is deployed as a Helm release into the arlo namespace in the management cluster. Here is a summary of the kinds of resources generated and deployed by the chart: - A unique namespace with a name based on the cluster's name. All subsequent resources below are created inside of that namespace. - The stack-specific resources to create the cluster (for e.g. Cluster API resources) - A ClusterRegistration to automatically register the cluster with ArgoCD - A GitRepoDir to automatically create a git repo and/or directory to host a copy of the expanded bundles. Every bundle referenced by the profile is copied/unpacked into its own subdirectory. - One ArgoCD Application resource for each bundle.","title":"Cluster chart"},{"location":"help/","text":"Help with MkDocs \u00b6 Welcome to Arlon documentation with MkDocs For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Help with MkDocs"},{"location":"help/#help-with-mkdocs","text":"Welcome to Arlon documentation with MkDocs For full documentation visit mkdocs.org .","title":"Help with MkDocs"},{"location":"help/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"help/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}